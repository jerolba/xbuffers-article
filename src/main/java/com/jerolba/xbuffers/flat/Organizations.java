// automatically generated by the FlatBuffers compiler, do not modify

package com.jerolba.xbuffers.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Organizations extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Organizations getRootAsOrganizations(ByteBuffer _bb) { return getRootAsOrganizations(_bb, new Organizations()); }
  public static Organizations getRootAsOrganizations(ByteBuffer _bb, Organizations obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Organizations __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public com.jerolba.xbuffers.flat.Organization organizations(int j) { return organizations(new com.jerolba.xbuffers.flat.Organization(), j); }
  public com.jerolba.xbuffers.flat.Organization organizations(com.jerolba.xbuffers.flat.Organization obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int organizationsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public com.jerolba.xbuffers.flat.Organization.Vector organizationsVector() { return organizationsVector(new com.jerolba.xbuffers.flat.Organization.Vector()); }
  public com.jerolba.xbuffers.flat.Organization.Vector organizationsVector(com.jerolba.xbuffers.flat.Organization.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createOrganizations(FlatBufferBuilder builder,
      int organizationsOffset) {
    builder.startTable(1);
    Organizations.addOrganizations(builder, organizationsOffset);
    return Organizations.endOrganizations(builder);
  }

  public static void startOrganizations(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addOrganizations(FlatBufferBuilder builder, int organizationsOffset) { builder.addOffset(0, organizationsOffset, 0); }
  public static int createOrganizationsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOrganizationsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endOrganizations(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOrganizationsBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedOrganizationsBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Organizations get(int j) { return get(new Organizations(), j); }
    public Organizations get(Organizations obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

