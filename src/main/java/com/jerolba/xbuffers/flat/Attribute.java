// automatically generated by the FlatBuffers compiler, do not modify

package com.jerolba.xbuffers.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Attribute extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Attribute getRootAsAttribute(ByteBuffer _bb) { return getRootAsAttribute(_bb, new Attribute()); }
  public static Attribute getRootAsAttribute(ByteBuffer _bb, Attribute obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Attribute __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public byte quantity() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte amount() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public short size() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public double percent() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public boolean active() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createAttribute(FlatBufferBuilder builder,
      int idOffset,
      byte quantity,
      byte amount,
      short size,
      double percent,
      boolean active) {
    builder.startTable(6);
    Attribute.addPercent(builder, percent);
    Attribute.addId(builder, idOffset);
    Attribute.addSize(builder, size);
    Attribute.addActive(builder, active);
    Attribute.addAmount(builder, amount);
    Attribute.addQuantity(builder, quantity);
    return Attribute.endAttribute(builder);
  }

  public static void startAttribute(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addQuantity(FlatBufferBuilder builder, byte quantity) { builder.addByte(1, quantity, 0); }
  public static void addAmount(FlatBufferBuilder builder, byte amount) { builder.addByte(2, amount, 0); }
  public static void addSize(FlatBufferBuilder builder, short size) { builder.addShort(3, size, 0); }
  public static void addPercent(FlatBufferBuilder builder, double percent) { builder.addDouble(4, percent, 0.0); }
  public static void addActive(FlatBufferBuilder builder, boolean active) { builder.addBoolean(5, active, false); }
  public static int endAttribute(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Attribute get(int j) { return get(new Attribute(), j); }
    public Attribute get(Attribute obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

